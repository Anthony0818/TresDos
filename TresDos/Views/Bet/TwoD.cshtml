@{
    ViewBag.Title = "2D";
}
@using TresDos.Application.DTOs
@using TresDos.Application.ViewModel.BetModel
@model TwoDViewModel
@using (Html.BeginForm("TwoD", "Bet", FormMethod.Post))
{
    <div class="row justify-content-center mb-3">
        <div class="col-auto">
            <!-- Auto-width center wrapper -->
            <div class="row g-3">
                <div class="col-6">
                    @Html.TextBoxFor(model => model.DrawDate, "{0:yyyy-MM-dd}", new { type = "date", @class = "form-control" })
                </div>
                <div class="col-6">
                    @Html.DropDownListFor(m => m.DrawType, Model.TimeOptions, new { @class = "form-select", style = "width: 130px;" })
                </div>
            </div>
        </div>
    </div>
    <!--<div class="container mt-4">-->
    <div class="row">
        <div class="col-md-4 mb-3">
            <div class="card">
                <div class="card-header">
                    2D - Bet Entry (@Model.DrawType)
                </div>
                <div class="card-body">
                    <div class="container">

                        <!-- Yellow Header Section -->
                        @* <div class="row align-items-center px-3"> *@
                        <div class="card mb-3 bg-info" style="background-color: #fff3cd;">
                            <div class="card-body">
                                <div class="row">

                                    <div class="container">
                                        <div class="row">
                                            <div class="col-auto">
                                                <span class="">@Model.DrawDate.ToString("dddd, MMMM dd, yyyy")</span>
                                                <br>
                                                <span class="h2">@Model.DrawType</span>
                                            </div>
                                            <div class="col-auto ms-auto">
                                                <img src="~/images/2d.png" style="width:80px;" />
                                            </div>
                                        </div>
                                    </div>

                                    <hr>
                                    <span class="h6">Cut Off Time: @DateTime.Today.Add(Model.DrawCutOffTime).ToString("hh:mm tt")</span>
                                    <br>
                                    <span class="h6">Draw Time: @DateTime.Today.Add(Model.DrawTime).ToString("hh:mm tt")</span>

                                </div>
                            </div>
                        </div>
                        @*  </div> *@

                        <!-- Select Agent -->
                        <div class="row">
                            <div class="col-12 mb-3">
                                <label asp-for="Entry" class="form-label">Select Agent</label>
                                @Html.DropDownListFor(m => m.SelectedAgentID, Model.Agents, new { @class = "form-select" })
                                @Html.HiddenFor(m => m.SelectedAgentText, new { id = "selectedAgentText" })
                                <span asp-validation-for="SelectedAgentID" class="text-danger"></span>
                            </div>
                        </div>
                        @if (ViewBag.InvalidBettorName != null)
                        {
                            <div class="row">
                                <div class="col-12 mb-3">
                                    <div class="alert alert-danger" role="alert">
                                        ❌ @ViewBag.InvalidBettorName
                                    </div>
                                </div>
                            </div>
                        }
                        <!-- Combination Text Area -->
                        <div class="row">
                            <div class="col-12 mb-3">
                                <label asp-for="Entry" class="form-label">Combination Entry</label>
                                @Html.TextAreaFor(m => m.Entry, new { @class = "form-control", rows = 8 })
                                <span asp-validation-for="Entry" class="text-danger"></span>
                            </div>
                        </div>

                        <!-- Validate Button -->
                        <div class="row">
                            <div class="col-12 text-center text-md-start">
                                <button type="submit" name="action" value="Validate" class="btn btn-primary w-100 w-md-auto">
                                    Validate
                                </button>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>
        @if (Model.Entries != null)
        {
            if (Model.Entries.Count > 0)
            {
                <div class="col-md-4 mb-3">
                    <div class="card mb-3">
                        <div class="card-header">
                            Validation
                        </div>
                        <div class="card-body">
                            @if (Model.Entries != null)
                            {
                                if (Model.Entries.Count == 0)
                                {
                                    <p>No entries found.</p>
                                }
                                else
                                {
                                    foreach (var entry in Model.Entries)
                                    {
                                        <!-- MOBILE CARD LAYOUT -->
                                        <div class="mobile-cards">
                                            @{
                                                int count = 1;
                                                foreach (var bet in entry.Bets.Where(a => String.IsNullOrEmpty(a.Error)))
                                                {
                                                    <div class="card mb-3">
                                                        <div class="card-header">
                                                            @bet.Combination=@bet.Amount@bet.Type
                                                        </div>
                                                        <div class="card-body">
                                                            <!--<h6 class="card-title mb-2">#@count</h6>-->
                                                            <p class="mb-1"><strong>Agent:</strong> @Model.SelectedAgentText</p>
                                                            <p class="mb-1"><strong>Bettor:</strong> @entry.BettorName</p>
                                                            <p class="mb-1"><strong>Raw Input:</strong> @bet.RawInput</p>
                                                            <p class="mb-1"><strong>Combination:</strong> @bet.Combination</p>
                                                            <p class="mb-1"><strong>Amount:</strong> @bet.Amount</p>
                                                            <p class="mb-1"><strong>Bet Type:</strong> @bet.BetTypeName</p>
                                                            <p class="mb-0">
                                                                <strong>Status:</strong>
                                                                @if (!string.IsNullOrEmpty(bet.Error))
                                                                {
                                                                    <span class="error">@bet.Error</span>
                                                                }
                                                                else
                                                                {
                                                                    <span class="valid">Valid</span>
                                                                }
                                                            </p>
                                                        </div>
                                                    </div>
                                                    count++;
                                                }
                                            }
                                        </div>
                                    }

                                    @*<h3>📋 Copy Bets</h3>

                                    <div class="copy-buttons mb-3">
                                        <button type="button" class="btn btn-primary me-2 mb-2" onclick="copyText('validBets')">Valid Bets</button>
                                        <!--<button type="button" class="btn btn-danger me-2 mb-2" onclick="copyText('invalidBets')">Copy Invalid Bets</button>-->
                                        <button type="button" class="btn btn-danger me-2 mb-2" onclick="copyInvalidBetsDivText()">Invalid Bets</button>
                                        <button type="button" class="btn btn-secondary mb-2" onclick="copyText('allBets')">All Bets</button>
                                    </div>*@

                                    <div class="bet-section">
                                        <!--VALID BETS-->
                                        @{
                                            var validEntries = Model.Entries
                                            .Select(e => new
                                            {
                                                e.BettorName,
                                                ValidBets = e.Bets.Where(b => string.IsNullOrEmpty(b.Error)).ToList()
                                            })
                                            .Where(e => e.ValidBets.Any())
                                            .ToList();

                                            var totalValidBets = validEntries.Sum(e => e.ValidBets.Count);
                                        }

                                        <div class="card mb-3">
                                            <div class="card-header d-flex justify-content-between align-items-center">
                                                <h5 class="mb-0 text-success">✅ Valid Bets (@totalValidBets)</h5>
                                                <button type="button" class="btn btn-link p-0" onclick="toggleSection('validBetsSection', this)">Show</button>
                                            </div>
                                            <div class="card-body" id="validBetsSection" style="display: none">
                                                @foreach (var entry in validEntries)
                                                {
                                                    <p class="text-success fw-bold mb-1">@($"{entry.BettorName}")</p>
                                                    @foreach (var bet in entry.ValidBets)
                                                    {
                                                        <p class="text-success mb-1">@bet.RawInput</p>
                                                    }
                                                    <hr />
                                                }
                                            </div>
                                            <div class="card-footer text-muted">
                                                <button type="button" class="btn btn-success me-2 mb-2" onclick="copyDivText('validBetsSection')">Copy Valid Bets</button>
                                            </div>
                                        </div>
                                        <!--INVALID BETS-->
                                        @{
                                            var invalidEntries = Model.Entries
                                            .Select(e => new
                                            {
                                                e.BettorName,
                                                InvalidBets = e.Bets.Where(b => !string.IsNullOrEmpty(b.Error)).ToList()
                                            })
                                            .Where(e => e.InvalidBets.Any())
                                            .ToList();

                                            var totalInvalidBets = invalidEntries.Sum(e => e.InvalidBets.Count);
                                        }

                                        <div class="card mb-3">
                                            <div class="card-header d-flex justify-content-between align-items-center">
                                                <h5 class="mb-0 text-danger">❌ Invalid Bets (@totalInvalidBets)</h5>
                                                <button type="button" class="btn btn-link p-0" onclick="toggleSection('invalidBetsSection', this)">Hide</button>
                                            </div>
                                            <div class="card-body" id="invalidBetsSection">
                                                @foreach (var entry in invalidEntries)
                                                {
                                                    <p class="text-danger fw-bold mb-1">@($"{entry.BettorName}")</p>
                                                    @foreach (var bet in entry.InvalidBets)
                                                    {
                                                        <p class="text-danger mb-1">@bet.RawInput (@bet.Error)</p>
                                                    }
                                                    <hr />
                                                }
                                            </div>
                                            <div class="card-footer text-muted">
                                                <button type="button" class="btn btn-danger me-2 mb-2" onclick="copyDivText('invalidBetsSection')">Copy Invalid Bets</button>
                                            </div>
                                        </div>

                                        <!--ALL BETS-->
                                        @{
                                            var allEntries = Model.Entries
                                            .Where(e => e.Bets.Any())
                                            .Select(e => new
                                            {
                                                e.BettorName,
                                                AllBets = e.Bets
                                            })
                                            .ToList();

                                            var totalAllBets = allEntries.Sum(e => e.AllBets.Count);
                                        }

                                        <div class="card mb-3">
                                            <div class="card-header d-flex justify-content-between align-items-center">
                                                <h5 class="mb-0 text-info">📋 All Bets (@totalAllBets)</h5>
                                                <button type="button" class="btn btn-link p-0" onclick="toggleSection('allBetsSection', this)">Show</button>
                                            </div>
                                            <div class="card-body" id="allBetsSection" style="display: none">
                                                @foreach (var entry in allEntries)
                                                {
                                                    <p class="fw-bold mb-1">@($"{entry.BettorName}")</p>
                                                    @foreach (var bet in entry.AllBets)
                                                    {
                                                        <p class="mb-1">
                                                            @bet.RawInput
                                                            @if (!string.IsNullOrEmpty(bet.Error))
                                                            {
                                                                <span class="text-danger">(@bet.Error)</span>
                                                            }
                                                        </p>
                                                    }
                                                    <hr />
                                                }
                                            </div>
                                            <div class="card-footer text-muted">
                                                <button type="button" class="btn btn-info me-2 mb-2" onclick="copyDivText('allBetsSection')">Copy All Bets</button>
                                            </div>
                                        </div>
                                    </div>
                                    @if (totalValidBets > 0)// Show Submit Button only if there are valid bets
                                    {
                                        <div>
                                            <label>
                                                <input type="checkbox" id="agreeCheckbox" />
                                                I agree to the terms and conditions
                                            </label>
                                        </div>

                                        <div>
                                            <button id="submitBets" type="submit" name="action" value="Submit" class="btn btn-primary w-100 w-md-auto">
                                                Submit
                                            </button>
                                        </div>
                                    }
                                }
                            }
                           
                            <script>
                                function copyDivText(sectionId) {
                                    const div = document.getElementById(sectionId);

                                    if (!div) {
                                        alert("Div not found!");
                                        return;
                                    }

                                    // Clone the element to avoid modifying the original
                                    const cloned = div.cloneNode(true);

                                    // Replace each <hr> with a span containing \n\n and remove the <hr>
                                    const hrs = cloned.querySelectorAll('hr');
                                    hrs.forEach(hr => {
                                        const newlineSpan = document.createElement('span');
                                        newlineSpan.innerText = '\n\n';
                                        hr.parentNode.insertBefore(newlineSpan, hr.nextSibling);
                                        hr.remove(); // remove the <hr>
                                    });

                                    // Extract raw text
                                    const rawText = cloned.innerText || cloned.textContent || '';

                                    // Normalize:
                                    // - Remove leading spaces (left-align everything)
                                    // - Preserve blank lines (from \n\n)
                                    const normalized = rawText
                                        .split('\n')
                                        .map(line => line.trimStart()) // left-align
                                        .join('\n');

                                    navigator.clipboard.writeText(normalized)
                                        //.then(() => alert("Copied as plain text!"))
                                        .catch(err => console.error("Copy failed:", err));
                                }
                            </script>

                            <script>
                                function toggleSection(sectionId, btn) {
                                    const section = document.getElementById(sectionId);
                                    if (section.style.display === "none") {
                                    section.style.display = "block";
                                    btn.textContent = "Hide";
                                    } else {
                                    section.style.display = "none";
                                    btn.textContent = "Show";
                                    }
                                }
                            </script>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="col-md-4 mb-3">
                    <div class="card">
                        <div class="card-header">
                            2D - Bets
                        </div>
                        <div class="card-body" style="overflow-y: auto;">
                            <table id="betsTable">
                                <thead>
                                    <tr>
                                        <th>Bettor</th>
                                        <th>1st #</th>
                                        <th>2nd #</th>
                                        <th>Type</th>
                                        <th>Amount</th>
                                        <th>Draw Type</th>
                                        <th>Draw Date</th>
                                    </tr>
                                </thead>
                            </table>
                        </div>
                    </div>
                </div>

                <div class="col-md-4 mb-3">
                    <div class="card">
                        <div class="card-header">
                            2D - Logs (2PM)
                        </div>
                        <div class="card-body">
                            <h5 class="card-title"></h5>
                            <p class="card-text">Bet logs goes here.</p>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
<!--</div>-->

}

@section Scripts {

    <script type="text/javascript">
        document.querySelector("[name='SelectedAgentID']").addEventListener('change', function () {
            var selectedOption = this.options[this.selectedIndex];
            document.getElementById("selectedAgentText").value = selectedOption.text;
        });
    </script>

    <!-- Enables client-side validation -->
    <partial name="_ValidationScriptsPartial" />

    <script type="text/javascript">
        $(document).ready(function () {
            if (!$.fn.DataTable.isDataTable('#betsTable')) {
                new DataTable('#betsTable', {
                    destroy: true,
                    ajax: {
                        url: '@Url.Action("LoadTwoDBetsAsync", "Bet")',
                        type: 'GET',
                        dataType: 'json',
                        headers: {
                            'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                        },
                        data: function(d) {
                            return {
                                drawType: '@Model.DrawType'
                            };
                        },
                        dataSrc: function (json) {
                            console.log("API Data:", json); // log entire response
                            console.log("Bets:", json.data); // log just the data array
                            return json.data;
                        }
                    },
                    columns: [
                        { data: 'bettor' },
                        { data: 'firstDigit' },
                        { data: 'secondDigit' },
                        { data: 'type' },
                        { data: 'amount' },
                        { data: 'drawType' },
                        {
                            data: 'drawDate',
                            render: function(data) {
                                return new Date(data).toLocaleDateString();
                            }
                        }
                    ]
                });
            }
        });
    </script>
    <script>
        document.getElementById("submitBets").addEventListener("click", function (e) {
            const checkbox = document.getElementById("agreeCheckbox");
            if (!checkbox.checked) {
                e.preventDefault(); // Prevent form submission
                alert("You must agree to the terms and conditions before submitting.");
            }
        });
    </script>
}